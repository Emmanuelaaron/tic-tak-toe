#!/usr/bin/env ruby

module GameLogic
  def validate_wins(board, a, b, c, game_on_going, current_player, player2, player1)
    if board[a] == board[b] && board[b] == board[c] && board[a] != '_'
      game_on_going = false
      if current_player == 'O'
        puts "#{player2} wins"
      else
        puts "#{player1} wins" 
      end
    end
  end
end

class TicTacToe
  include GameLogic
  def initialize
    @board = %w[
      _ _ _
      _ _ _
      _ _ _
    ]
    @game_on_going = true
    @current_player = 'X'
    puts 'Player1 enter your name'
    @player1 = gets.chomp
    puts 'Player2 enter your name'
    @player2 = gets.chomp

  end

  def display_board
    puts @board[0] + '|' + @board[1] + '|' + @board[2]
    puts @board[3] + '|' + @board[4] + '|' + @board[5]
    puts @board[6] + '|' + @board[7] + '|' + @board[8]
  end

  def players_turn
    puts 'choose from 1 - 9'
    turn = gets.chomp.to_i
    # if turn is not in the range of 1-9 return invalid
  
    arr = (1..9)
    until arr.include? turn
      display_board
      puts 'invalid choose from 1 - 9'
      turn = gets.chomp.to_i
    end
    turn -= 1
    while @board[turn] != '_'
      display_board
      puts 'Slot already taken or invalid, choose from 1 - 9'
      turn = gets.chomp.to_i
      turn -= 1
    end
    @board[turn] = @current_player
  end

  def flip_player
    if @current_player == 'X'
      @current_player = 'O'
      puts "It's #{@player2}'s turn to play"
    else
      @current_player = 'X'
      puts "It's #{@player1}'s turn to play"
    end
  end

  def check_win
    check_row
    check_column
    check_diagonal
  end

  def check_column
    validate_wins(@board, 0, 3, 6, @game_on_going, @current_player, @Player2, @player1)
  end

  def check_row
    if @board[0] == @board[1] && @board[0] == @board[2] && @board[0] != '_'
      @game_on_going = false
      if @current_player == 'O'
        puts "#{@player2} wins"
      else
        puts "#{@player1} wins" 
      end
    elsif @board[3] == @board[4] && @board[3] == @board[5] && @board[3] != '_'
        @game_on_going = false
        if @current_player == 'O'
          puts "#{@player2} wins"
        else
          puts "#{@player1} wins" 
        end
    elsif @board[6] == @board[7] && @board[6] == @board[8] && @board[6] != '_'
      @game_on_going = false
      if @current_player == 'O'
        puts "#{@player2} wins"
      else
        puts "#{@player1} wins"
      end
    end
  end

  def check_diagonal
    if @board[0] == @board[4] && @board[0] == @board[8] && @board[0] != '_'
      @game_on_going = false
      if @current_player == 'O'
        puts "#{@player2} wins"
      else
        puts "#{@player1} wins"
      end
    elsif @board[2] == @board[4] && @board[2] == @board[6] && @board[2] != '_'
      @game_on_going = false
      if @current_player == 'O'
        puts "#{@player2} wins"
      else
        puts "#{@player1} wins"
      end
    end
  end

  def if_tie
    result = @board.all? do |item|
      item == 'X' || item == 'O'
    end
    result
  end

  def check_tie
    if if_tie
      @game_on_going = false
      puts "It's a tie"
    end
  end

  def play_game
    display_board
    puts "It's #{@player1}'s turn to play"
    while @game_on_going
      players_turn
      display_board
      check_win
      check_tie
      flip_player
    end
  end  
end

play_game = TicTacToe.new

play_game.play_game
