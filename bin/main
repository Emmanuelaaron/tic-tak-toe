#!/usr/bin/env ruby

# module GameLogic
#   def validate_wins(board, a, b, c, current_player, player2, player1)
#     if board[a] == board[b] && board[b] == board[c] && board[a] != '_'
#       if current_player == 'O'
#         puts "#{player2} wins"
#       else
#         puts "#{player1} wins" 
#       end
#       true
#     end
#   end
# end

class GameLogic
  def initialize(board, current_player)
    @board = board
    @current_player = current_player
  end

  def validate_wins(pos_a, pos_b, pos_c, player2, player1)
    if @board[pos_a] == @board[pos_b] && @board[pos_b] == @board[pos_c] && @board[pos_a] != '_'
      if @current_player == 'O'
        puts "#{player2} wins"
      else
        puts "#{player1} wins" 
      end
      true
    end
  end
end

class TicTacToe
  # include GameLogic
  def initialize
    @board = %w[
      _ _ _
      _ _ _
      _ _ _
    ]
    @game_on_going = true
    @current_player = 'X'
    puts 'Player1 enter your name'
    @player1 = gets.chomp
    puts 'Player2 enter your name'
    @player2 = gets.chomp

  end

  def display_board
    puts @board[0] + '|' + @board[1] + '|' + @board[2]
    puts @board[3] + '|' + @board[4] + '|' + @board[5]
    puts @board[6] + '|' + @board[7] + '|' + @board[8]
  end

  def players_turn
    puts 'choose from 1 - 9'
    turn = gets.chomp.to_i
    # if turn is not in the range of 1-9 return invalid
  
    arr = (1..9)
    until arr.include? turn
      display_board
      puts 'invalid choose from 1 - 9'
      turn = gets.chomp.to_i
    end
    turn -= 1
    while @board[turn] != '_'
      display_board
      puts 'Slot already taken or invalid, choose from 1 - 9'
      turn = gets.chomp.to_i
      turn -= 1
    end
    @board[turn] = @current_player
  end

  def flip_player
    if @current_player == 'X'
      @current_player = 'O'
      puts "It's #{@player2}'s turn to play"
    else
      @current_player = 'X'
      puts "It's #{@player1}'s turn to play"
    end
  end

  def check_win
    validate = GameLogic.new(@board, @current_player)
    @game_on_going = false if validate.validate_wins(0, 3, 6, @Player2, @player1)
    @game_on_going = false if validate.validate_wins(1, 4, 7, @Player2, @player1)
    @game_on_going = false if validate.validate_wins(2, 5, 8, @Player2, @player1)
    # @game_on_going = false if validate_wins(@board, 0, 1, 2, @current_player, @Player2, @player1)
    # @game_on_going = false if validate_wins(@board, 3, 4, 5, @current_player, @Player2, @player1)
    # @game_on_going = false if validate_wins(@board, 6, 7, 8, @current_player, @Player2, @player1)
    # @game_on_going = false if validate_wins(@board, 0, 4, 8, @current_player, @Player2, @player1)
    # @game_on_going = false if validate_wins(@board, 2, 4, 6, @current_player, @Player2, @player1)
  end

  def if_tie
    result = @board.all? do |item|
      item == 'X' || item == 'O'
    end
    result
  end

  def check_tie
    if if_tie
      @game_on_going = false
      puts "It's a tie"
    end
  end

  def play_game
    display_board
    puts "It's #{@player1}'s turn to play"
    while @game_on_going
      players_turn
      display_board
      check_win
      check_tie
      flip_player
    end
  end
end

play_game = TicTacToe.new

play_game.play_game
